from chelsa_cmip6.GetClim import chelsa_cmip6
for year in range(2016,2020):
chelsa_cmip6(activity_id='ScenarioMIP',
table_id='Amon',
experiment_id='ssp585',
institution_id='MPI-M',
source_id='MPI-ESM1-2-LR',
member_id='r1i1p1f1',
refps='1981-01-15',
refpe='2010-12-15',
fefps=str(year) + '-01-15',
fefpe=str(year) + '-12-15',
xmin=5.3,
xmax=10.4,
ymin=46.0,
ymax=47.5,
output='~/')
for year in range(2016,2020):
chelsa_cmip6(activity_id='ScenarioMIP',
table_id='Amon',
experiment_id='ssp585',
institution_id='MPI-M',
source_id='MPI-ESM1-2-LR',
member_id='r1i1p1f1',
refps='1981-01-15',
refpe='2010-12-15',
fefps=str(year) + str('-01-15'),
fefpe=str(year) + str('-12-15'),
xmin=5.3,
xmax=10.4,
ymin=46.0,
ymax=47.5,
output='~/')
library(loadeR)
try <- loadGridData("~/Desktop/chelsa/CHELSA_NOAA-GFDL_GFDL-ESM4_tas_ssp585_r1i1p1f1_2016-01-01_2016-12-31.nc")
try <- loadGridData("~/Desktop/chelsa/CHELSA_NOAA-GFDL_GFDL-ESM4_tas_ssp585_r1i1p1f1_2016-01-01_2016-12-31.nc", var="pr")
try <- loadGridData("/home/riccardo/Desktop/chelsa/CHELSA_NOAA-GFDL_GFDL-ESM4_tas_ssp585_r1i1p1f1_2016-01-01_2016-12-31.nc", var="pr")
fl <- "/home/riccardo/Desktop/chelsa/CHELSA_NOAA-GFDL_GFDL-ESM4_tas_ssp585_r1i1p1f1_2016-01-01_2016-12-31.nc"
dataInventory(fl)
try <- loadGridData(fl, var="tas")
dim(try$Data)
library(CAVAanalytics)
?load_data
exmp <- load_data(country = "Somalia", variable="tas", years.hist=1980:2005, years.proj=2010:2020,
path.to.data = "/home/riccardo/Databases/CORDEX-CORE/AFR-22/", path.to.obs = "W5E5")
exmp <- load_data(country = "Somalia", variable="tasmax", years.hist=1980:2005, years.proj=2010:2020,
path.to.data = "/home/riccardo/Databases/CORDEX-CORE/AFR-22/", path.to.obs = "W5E5")
exmp <- load_data(country = "Somalia", variable="tasmax", years.hist=1980:2005, years.proj=2010:2020,
path.to.data = "/home/riccardo/Databases/CORDEX-CORE/AFR-22/", path.to.obs = "/home/riccardo/Databases/W5E5/")
exmp[[1]]$obs[[1]]$Dates$start
str_extract(exmp[[1]]$obs[[1]]$Dates$start, "//D{4}")
library(stringr)
str_extract(exmp[[1]]$obs[[1]]$Dates$start, "//D{4}")
str_extract(exmp[[1]]$obs[[1]]$Dates$start, "//d{4}")
str_extract(exmp[[1]]$obs[[1]]$Dates$start, "//d{4}")
str_extract(exmp[[1]]$obs[[1]]$Dates$start, "\\d{4}")
length(unique(str_extract(exmp[[1]]$obs[[1]]$Dates$start, "\\d{4}")))
library(loadeR)
path_pr <- "/home/riccardo/Databases/CRU/cru_ts4.07.1901.2022.pre.dat.nc"
pr <- loadGridData(path_pr, season = 1:12, var = "pre", lonLim=71.419, latLim=30.203)
path_tmx <- "/home/riccardo/Databases/CRU/cru_ts4.07.1901.2022.tmx.dat.nc"
tmx <- loadGridData(path_tmx, season = 1:12, var = "tmx", lonLim=71.419, latLim=30.203)
path_tmn <- "/home/riccardo/Databases/CRU/cru_ts4.07.1901.2022.tmn.dat.nc"
tmn <- loadGridData(path_tmn, season = 1:12, var = "tmn", lonLim=71.419, latLim=30.203)
path_tmp <- "/home/riccardo/Databases/CRU/cru_ts4.07.1901.2022.tmp.dat.nc"
tmp <- loadGridData(path_tmp, season = 1:12, var = "tmp", lonLim=71.419, latLim=30.203)
tot_df <- data.frame(dates=as.Date(tmp$Dates$start), tas=tmp$Data, tasmax=tmx$Data, tasmin=tmn$Data, pr=pr$Data)
View(tot_df)
write.csv(tot_df, file = "/home/riccardo/Desktop/Pakistan_CRU.csv")
library(loadeR)
library(tidyverse)
path_pr <- "/home/riccardo/Databases/CRU/cru_ts4.07.1901.2022.pre.dat.nc"
pr <- loadGridData(path_pr, season = 1:12, var = "pre", lonLim=71.419, latLim=30.203)
path_tmx <- "/home/riccardo/Databases/CRU/cru_ts4.07.1901.2022.tmx.dat.nc"
tmx <- loadGridData(path_tmx, season = 1:12, var = "tmx", lonLim=71.419, latLim=30.203)
path_tmn <- "/home/riccardo/Databases/CRU/cru_ts4.07.1901.2022.tmn.dat.nc"
tmn <- loadGridData(path_tmn, season = 1:12, var = "tmn", lonLim=71.419, latLim=30.203)
path_tmp <- "/home/riccardo/Databases/CRU/cru_ts4.07.1901.2022.tmp.dat.nc"
tmp <- loadGridData(path_tmp, season = 1:12, var = "tmp", lonLim=71.419, latLim=30.203)
tot_df <- data.frame(dates=as.Date(tmp$Dates$start), tas=tmp$Data, tasmax=tmx$Data, tasmin=tmn$Data, pr=pr$Data)
View(tot_df)
tot_df  %>%
mutate(year = lubridate::year(dates),
month = lubridate::month(dates, label = TRUE))
tas <- tot_df  %>%
select(dates, tas) %>%
mutate(year = lubridate::year(dates),
month = lubridate::month(dates, label = TRUE)) %>%
pivot_wider(names_from = month, values_from = tas)
View(tas)
tas <- tot_df  %>%
select(dates, tas) %>%
mutate(year = lubridate::year(dates),
month = lubridate::month(dates, label = TRUE)) %>%
select(-dates) %>%
pivot_wider(names_from = month, values_from = tas)
View(tas)
View(tot_df)
var <- c("tas", "tasmax", "tasmin", "pr")
var <- c("tas", "tasmax", "tasmin", "pr")
var <- c("tas", "tasmax", "tasmin", "pr")
for (i in var) {
tot_df  %>%
select(dates, i) %>%
mutate(year = lubridate::year(dates),
month = lubridate::month(dates, label = TRUE)) %>%
select(-dates) %>%
pivot_wider(names_from = month, values_from = i) %>%
write.csv(., file = paste0("/home/riccardo/Desktop/Pakistan_", i, "_CRU.csv"))
}
library(shiny)
library(leaflet)
library(sf)
library(shinydashboard)
library(tidyverse)
library(shinyjs)
library(shinyBS)
ui <- dashboardPage(
dashboardHeader(title = "ESS9 Layers"),
dashboardSidebar(
sidebarMenu(
menuItem("Map", tabName = "map", icon = icon("globe")),
selectInput(
"continent",
"Select a continent",
choices = c("Africa", "Antarctica", "Asia", "Europe", "North America", "Australia", "South America"),
selected = NULL
),
shinyjs::hidden(
div(id = "layers",
checkboxGroupInput("layer",
"Select a layer",
choices = tagList(
div(HTML('<span class="info-layer">UNESCO WHS</span>'),
actionButton("infoUNESCO", label = "", icon = icon("info-circle"), class = "info-button")),
div(HTML('<span class="info-layer">RAMSAT site</span>'),
actionButton("infoRAMSAT", label = "", icon = icon("info-circle"), class = "info-button"))
),
selected = NULL)
)
)
)
),
dashboardBody(
useShinyjs(),
actionButton("ess9", "ESS9", class = "btn-primary"),
tabItems(
tabItem(tabName = "map",
fluidRow(
box(width = 12, leafletOutput("map", height = 800))
)
)
)
)
)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(shiny)
library(leaflet)
library(sf)
library(shinydashboard)
library(tidyverse)
library(shinyjs)
library(shinyBS)
ui <- dashboardPage(
dashboardHeader(title = "ESS9 Layers"),
dashboardSidebar(
sidebarMenu(
menuItem("Map", tabName = "map", icon = icon("globe")),
selectInput(
"continent",
"Select a continent",
choices = c("Africa", "Antarctica", "Asia", "Europe", "North America", "Australia", "South America"),
selected = NULL
),
shinyjs::hidden(
div(id = "layers",
checkboxGroupInput("layer",
"Select a layer",
choices = c("UNESCO WHS", "RAMSAT site"),
selected = NULL)
)
)
)
),
dashboardBody(
useShinyjs(),
actionButton("ess9", "ESS9", class = "btn-primary"),
tabItems(
tabItem(tabName = "map",
fluidRow(
box(width = 12, leafletOutput("map", height = 800))
)
)
)
)
)
server <- function(input, output, session) {
output$map <- renderLeaflet({
base_map <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron)
return(base_map)
})
observeEvent(input$ess9, {
shinyjs::toggle("layers")
})
observeEvent(c(input$continent, input$layer), {
if (!is.null(input$continent) && !is.null(input$layer)) {
showModal(modalDialog(
title = "Processing data...",
"Please wait while the data is being processed.",
easyClose = FALSE,
footer = NULL
))
shapefilePath1 <-  "9.1-9.4/UNESCO_sites/Unesco.shp"
shapefilePath2 <-  "9.1-9.4/ramsar_sites/ramsar.shp"
continentsPath <- "../World_Continents/World_Continents.shp"
shapefile1 <- st_read(shapefilePath1)
shapefile2 <- st_read(shapefilePath2)
continents <- st_read(continentsPath) %>%
rename(name=2)
shapefile1 <- st_join(shapefile1, continents[, "name"], join = st_within)
shapefile2 <- st_join(shapefile2, continents[, "name"], join = st_within)
names(shapefile1)[which(names(shapefile1) == "name")] <- "continent"
names(shapefile2)[which(names(shapefile2) == "name")] <- "continent"
shapefile1 <- shapefile1[shapefile1$continent == input$continent, ]
shapefile2 <- shapefile2[shapefile2$continent == input$continent, ]
output$map <- renderLeaflet({
base_map <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron)
if ("UNESCO WHS" %in% input$layer) {
base_map <- base_map %>%
addCircleMarkers(data = shapefile1, color = "#FF0000", fillColor = "#FFA500", fillOpacity = 0.8, stroke = TRUE, weight = 2, radius = 3, popup = ~name_en)
}
if ("RAMSAT site" %in% input$layer) {
base_map <- base_map %>%
addPolygons(data = shapefile2, color = "#0000FF", weight = 2, opacity = 1, fillColor = "#0000FF", fillOpacity = 0.6)
}
base_map
})
removeModal()
}
})
}
shinyApp(ui = ui, server = server)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(shiny)
library(leaflet)
library(sf)
library(shinydashboard)
library(tidyverse)
library(shinyjs)
library(shinyBS)
install.packages("shinyBS")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(shiny)
library(leaflet)
library(sf)
library(shinydashboard)
library(tidyverse)
library(shinyjs)
library(shinyBS)
ui <- dashboardPage(
dashboardHeader(title = "ESS9 Layers"),
dashboardSidebar(
sidebarMenu(
menuItem("Map", tabName = "map", icon = icon("globe")),
selectInput(
"continent",
"Select a continent",
choices = c("Africa", "Antarctica", "Asia", "Europe", "North America", "Australia", "South America"),
selected = NULL
),
shinyjs::hidden(
div(id = "layers",
checkboxGroupInput("layer",
"Select a layer",
choices = c("UNESCO WHS", "RAMSAT site"),
selected = NULL)
)
)
)
),
dashboardBody(
useShinyjs(),
actionButton("ess9", "ESS9", class = "btn-primary"),
tabItems(
tabItem(tabName = "map",
fluidRow(
box(width = 12, leafletOutput("map", height = 800))
)
)
)
)
)
server <- function(input, output, session) {
output$map <- renderLeaflet({
base_map <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron)
return(base_map)
})
observeEvent(input$ess9, {
shinyjs::toggle("layers")
})
observeEvent(c(input$continent, input$layer), {
if (!is.null(input$continent) && !is.null(input$layer)) {
showModal(modalDialog(
title = "Processing data...",
"Please wait while the data is being processed.",
easyClose = FALSE,
footer = NULL
))
shapefilePath1 <-  "9.1-9.4/UNESCO_sites/Unesco.shp"
shapefilePath2 <-  "9.1-9.4/ramsar_sites/ramsar.shp"
continentsPath <- "../World_Continents/World_Continents.shp"
shapefile1 <- st_read(shapefilePath1)
shapefile2 <- st_read(shapefilePath2)
continents <- st_read(continentsPath) %>%
rename(name=2)
shapefile1 <- st_join(shapefile1, continents[, "name"], join = st_within)
shapefile2 <- st_join(shapefile2, continents[, "name"], join = st_within)
names(shapefile1)[which(names(shapefile1) == "name")] <- "continent"
names(shapefile2)[which(names(shapefile2) == "name")] <- "continent"
shapefile1 <- shapefile1[shapefile1$continent == input$continent, ]
shapefile2 <- shapefile2[shapefile2$continent == input$continent, ]
output$map <- renderLeaflet({
base_map <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron)
if ("UNESCO WHS" %in% input$layer) {
base_map <- base_map %>%
addCircleMarkers(data = shapefile1, color = "#FF0000", fillColor = "#FFA500", fillOpacity = 0.8, stroke = TRUE, weight = 2, radius = 3, popup = ~name_en)
}
if ("RAMSAT site" %in% input$layer) {
base_map <- base_map %>%
addPolygons(data = shapefile2, color = "#0000FF", weight = 2, opacity = 1, fillColor = "#0000FF", fillOpacity = 0.6)
}
base_map
})
removeModal()
}
})
}
shinyApp(ui = ui, server = server)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(shiny)
library(leaflet)
library(sf)
library(shinydashboard)
library(tidyverse)
library(shinyjs)
library(shinyBS)
ui <- dashboardPage(
dashboardHeader(title = "ESS9 Layers"),
dashboardSidebar(
sidebarMenu(
menuItem("Map", tabName = "map", icon = icon("globe")),
selectInput(
"continent",
"Select a continent",
choices = c("Africa", "Antarctica", "Asia", "Europe", "North America", "Australia", "South America"),
selected = NULL
),
shinyjs::hidden(
div(id = "layers",
checkboxGroupInput("layer",
"Select a layer",
choices = c("UNESCO WHS", "RAMSAT site"),
selected = NULL)
)
)
)
),
dashboardBody(
useShinyjs(),
actionButton("ess9", "ESS9", class = "btn-primary"),
tabItems(
tabItem(tabName = "map",
fluidRow(
box(width = 12, leafletOutput("map", height = 800))
)
)
)
)
)
server <- function(input, output, session) {
output$map <- renderLeaflet({
base_map <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron)
return(base_map)
})
observeEvent(input$ess9, {
shinyjs::toggle("layers")
})
observeEvent(c(input$continent, input$layer), {
if (!is.null(input$continent) && !is.null(input$layer)) {
showModal(modalDialog(
title = "Processing data...",
"Please wait while the data is being processed.",
easyClose = FALSE,
footer = NULL
))
shapefilePath1 <-  "9.1-9.4/UNESCO_sites/Unesco.shp"
shapefilePath2 <-  "9.1-9.4/ramsar_sites/ramsar.shp"
continentsPath <- "../World_Continents/World_Continents.shp"
shapefile1 <- st_read(shapefilePath1)
shapefile2 <- st_read(shapefilePath2)
continents <- st_read(continentsPath) %>%
rename(name=2)
shapefile1 <- st_join(shapefile1, continents[, "name"], join = st_within)
shapefile2 <- st_join(shapefile2, continents[, "name"], join = st_within)
names(shapefile1)[which(names(shapefile1) == "name")] <- "continent"
names(shapefile2)[which(names(shapefile2) == "name")] <- "continent"
shapefile1 <- shapefile1[shapefile1$continent == input$continent, ]
shapefile2 <- shapefile2[shapefile2$continent == input$continent, ]
output$map <- renderLeaflet({
base_map <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron)
if ("UNESCO WHS" %in% input$layer) {
base_map <- base_map %>%
addCircleMarkers(data = shapefile1, color = "#FF0000", fillColor = "#FFA500", fillOpacity = 0.8, stroke = TRUE, weight = 2, radius = 3, popup = ~name_en)
}
if ("RAMSAT site" %in% input$layer) {
base_map <- base_map %>%
addPolygons(data = shapefile2, color = "#0000FF", weight = 2, opacity = 1, fillColor = "#0000FF", fillOpacity = 0.6)
}
base_map
})
removeModal()
}
})
}
shinyApp(ui = ui, server = server)
